name: Feelpp PKG Factory
run-name: "PKG Factory Feel++ [ ${{ inputs.flavor }}/${{ inputs.dist }} ]"
on:
    workflow_dispatch:
      inputs:
        skip:
          description: 'Skip components'
          required: false
          default: ""
          type: string
        enable-debian:
            description: 'Enable debian distros'
            required: false
            default: 'all'
            type: choice
            options:
            - 'all'
            - 'bookworm'
            - 'testing'
            - 'sid'
        enable-ubuntu:
            description: 'Enable ubuntu distros'
            required: false
            default: 'all'
            type: choice
            options:
            - 'all'
            - 'noble'
            - 'jammy'
            - 'focal'
        enable-spack:
            description: 'Enable spack distros'
            required: false
            default: 'all'
            type: choice
            options:
            - 'all'
            - 'spack-mpich'
            - 'spack-openmpi'
        enable-docker:
            description: 'Enable docker container'
            required: false
            default: 'all'
            type: choice
            options:
            - 'all'
            - 'docker'
        enable-apptainer:
            description: 'Enable apptainer container'
            required: false
            default: 'all'
            type: choice
            options:
            - 'all'
            - 'apptainer'
        parallel:
          description: 'Number of parallel jobs'
          required: false
          default: "20"
          type: string
    workflow_call:
        outputs:
            matrix:
                description: 'Matrix of packages to build'
                value: ${{ jobs.pkg-factory.outputs.matrix }}
        inputs:
            parallel:
                description: 'Number of parallel jobs'
                required: false
                type: string
                default: "20"
            skip:
                description: 'Skip apptainer build'
                required: false
                type: string
                default: ""
            enable-debian:
                description: 'Enable debian distros'
                required: false
                default: 'all'
                type: string
            enable-ubuntu:
                description: 'Enable ubuntu distros'
                required: false
                default: 'all'
                type: string
            enable-spack:
                description: 'Enable spack distros'
                required: false
                default: 'all'
                type: string
            enable-docker:
                description: 'Enable docker distros'
                required: false
                default: 'all'
                type: string
            enable-apptainer:
                description: 'Enable apptainer distros'
                required: false
                default: 'all'
                type: string

jobs:

  pkg-factory:
    name: packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.pkg-factory.outputs.matrix }}
    steps:
    - uses: actions/github-script@v7
      id: pkg-factory
      with:
        script: |
            console.log(${{ toJson(inputs) }});
            const debian = ${{ toJson(inputs.enable-debian) || 'all' }};
            const ubuntu = ${{ toJson(inputs.enable-ubuntu) || 'all' }};
            const spack = ${{ toJson(inputs.enable-spack) || 'all' }};
            const docker = ${{ toJson(inputs.enable-docker) || 'all' }};
            const apptainer = ${{ toJson(inputs.enable-apptainer) || 'all' }};
            console.log( "enable-debian:", debian );
            console.log( "enable-ubuntu:", ubuntu );
            console.log( "enable-spack:", spack );
            console.log( "enable-docker:", docker );
            console.log( "enable-apptainer:", apptainer );

            function checkDebian(dist) {
              const enabled = ['all', 'debian', 'bookworm', 'testing', 'sid'];
              console.log("checkDebian:", enabled, debian, dist);
              console.log("enabled.includes(debian):", enabled.includes(debian));
              console.log("debian.includes('none'):", debian.includes('none'));
              return ( enabled.includes(debian) ) && (debian.includes(dist) || debian.includes('all') || debian.includes('debian'));
            }
            function checkUbuntu(dist) {
              const enabled = ['all', 'ubuntu', 'noble', 'jammy', 'focal'];
              return ( enabled.includes(ubuntu) ) && (ubuntu.includes(dist) || ubuntu.includes('all') || ubuntu.includes('ubuntu'));
            }
            function checkSpack(dist) {
              const enabled = ['all', 'spack', 'spack-mpich', 'spack-openmpi'];
              return ( enabled.includes(spack) ) && (spack.includes(dist) || spack.includes('all') || spack.includes('spack'));
            }
            function checkDocker(dist) {
              const enabled = ['all', 'docker'];
              return ( enabled.includes(docker) ) && (docker.includes(dist) || docker.includes('all') || docker.includes('docker'));
            }
            function checkApptainer(dist) {
              const enabled = ['all', 'apptainer'];
              return ( enabled.includes(apptainer) ) && (apptainer.includes(dist) || apptainer.includes('all') || apptainer.includes('apptainer'));
            }


            const skips = ['all', 'debian', 'bookworm', 'testing', 'sid', 'ubuntu', 'noble', 'jammy', 'focal', 'docker', 'apptainer', 'spack', 'spack-openmpi', 'spack-mpich'].reduce((acc, item) => {
              console.log("skip:", item, ${{ toJson(github.event.head_commit.message || '') }}, ${{ toJson( inputs.skip || '' ) }});
              acc[item] = ${{ toJson(github.event.head_commit.message || '') }}.includes(`skip ${item}`) || ${{ toJson( inputs.skip || '' ) }}.includes(item);
              return acc;
            }, {});

            const enables = ['debian', 'bookworm', 'testing', 'sid', 'ubuntu', 'noble', 'jammy', 'focal', 'docker', 'apptainer', 'spack', 'spack-openmpi', 'spack-mpich'].reduce((acc, item) => {
              console.log("enable:", item, ${{ toJson(github.event.head_commit.message || '') }});
              console.log("enable debian:", checkDebian(item));
              console.log("enable ubuntu:", checkUbuntu(item));
              console.log("enable spack:", checkSpack(item));
              console.log("enable docker:", checkDocker(item));
              console.log("enable apptainer:", checkApptainer(item));
              console.log("item", item, !item.includes('none') );

              acc[item] = ${{ toJson(github.event.head_commit.message || '') }}.includes(`enable ${item}`) ||
                      checkDebian(item) || checkUbuntu(item) || checkSpack(item) || checkDocker(item) || checkApptainer(item) ;

              console.log("enables acc[item]:", item, acc[item]);
              return acc;
            }, {});


            const includes = [];
            if ((!skips.all && !skips.debian && !skips.bookworm) || (enables.bookworm || enables.debian)) {
              console.log("debian bookworm:",enables.bookworm, enables.debian, skips.all, skips.debian, skips.bookworm);
              includes.push({
                'distro': 'debian/bookworm',
                'flavor': 'debian',
                'dist': 'bookworm',
                'version': '12',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'false'
              });
            }



            if ((!skips.all && !skips.debian && !skips.testing) || (enables.testing || enables.debian )) {
              console.log("debian testing:",enables.testing, enables.debian, skips.all, skips.debian, skips.testing);
              includes.push({
                'distro': 'debian/testing',
                'flavor': 'debian',
                'dist': 'testing',
                'version': 'testing',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'true'
              });
            }
            if ((!skips.all && !skips.debian && !skips.sid) || (enables.sid || enables.debian )) {
              console.log("debian sid:",enables.sid, enables.debian, skips.all, skips.debian, skips.sid);
              includes.push({
                'distro': 'debian/sid',
                'flavor': 'debian',
                'dist': 'sid',
                'version': 'unstable',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'true'
              });
            }
            if ((!skips.all && !skips.ubuntu && !skips.noble) || (enables.noble || enables.ubuntu )) {
              console.log("ubuntu noble:",enables.noble, enables.ubuntu, skips.all, skips.ubuntu, skips.noble);
              includes.push({
                'distro': 'ubuntu/noble',
                'flavor': 'ubuntu',
                'dist': 'noble',
                'version': '24.04',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'false'
              });
            }
            if ((!skips.all && !skips.ubuntu && !skips.jammy) || (enables.jammy || enables.ubuntu )) {
              console.log("ubuntu jammy:",enables.jammy, enables.ubuntu, skips.all, skips.ubuntu, skips.jammy);
              includes.push({
                'distro': 'ubuntu/jammy',
                'flavor': 'ubuntu',
                'dist': 'jammy',
                'version': '22.04',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'false'
              });
            }
            if ((!skips.all && !skips.ubuntu && !skips.focal) || (enables.focal || enables.ubuntu )) {
              console.log("ubuntu focal:",enables.focal, enables.ubuntu, skips.all, skips.ubuntu, skips.focal);
              includes.push({
                'distro': 'ubuntu/focal',
                'flavor': 'ubuntu',
                'dist': 'focal',
                'version': '20.04',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'false'
              });
            }
            if ((!skips.all && !skips.spack && !skips['spack-mpich']) || (enables['spack-mpich'] || enables.spack )) {
              includes.push({
                'distro': 'spack/mpich',
                'flavor': 'spack',
                'dist': 'mpich',
                'version': 'latest',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'true'
              });
            }
            if ((!skips.all && !skips.spack && !skips['spack-openmpi']) || (enables['spack-openmpi']|| enables.spack )) {
              includes.push({
                'distro': 'spack/openmpi',
                'flavor': 'spack',
                'dist': 'openmpi',
                'version': 'latest',
                'docker': (skips.docker && !enables.docker) ? 'false' : 'true',
                'apptainer': (skips.apptainer && !enables.apptainer) ? 'false' : 'true',
                'continue-on-error': 'true'
              });
            }
            console.log("includes:", includes);
            core.setOutput('matrix', { include: includes });